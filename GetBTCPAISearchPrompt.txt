i'ver set my path c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json
on express 

here's my app.js file :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.resolve(__dirname, 'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
        createTable();
        insertData();
    }
});

// Function to create btc_prices table
const createTable = () => {
    const createTableSQL = `
        CREATE TABLE IF NOT EXISTS btc_prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date DATE NOT NULL,
            close DECIMAL(10, 2) NOT NULL,
            volume BIGINT NOT NULL
        )
    `;
    db.run(createTableSQL, (err) => {
        if (err) {
            console.error('Error creating table:', err.message);
        } else {
            console.log('Table created successfully');
        }
    });
};

// Function to insert data into btc_prices table
const insertData = () => {
    const insertSQL = `
        INSERT INTO btc_prices (date, close, volume) VALUES
                                                         ('2024-05-25', 68536.88, 28293212160),
                                                         ('2024-05-23', 67929.56, 41895680979),
                                                         ('2024-05-22', 69122.34, 32802561717),
                                                         ('2024-05-21', 70136.53, 46932005990),
                                                         ('2024-05-20', 71448.20, 43850655717)
    `;
    db.run(insertSQL, (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
        } else {
            console.log('Data inserted successfully');
        }
    });
};

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    // Query database for data between startDate and endDate
    const query = `SELECT * FROM btc_prices WHERE date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into btc_prices table
app.post('/insert', (req, res) => {
    const { date, close, volume } = req.body;

    // Insert data into btc_prices table
    const insertSQL = `INSERT INTO btc_prices (date, close, volume) VALUES (?, ?, ?)`;
    db.run(insertSQL, [date, close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


here's my html :
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Price: ${price.price}, Date: ${price.date}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>
<script>
    function displayData(data, startDate, endDate) {
        var pricesContainer = document.getElementById('pricesContainer');
        pricesContainer.innerHTML = '';

        // Display the selected date range
        var dateRangeElement = document.createElement('p');
        dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
        pricesContainer.appendChild(dateRangeElement);

        // Display queried data
        if (data.length === 0) {
            var noDataElement = document.createElement('p');
            noDataElement.textContent = 'No data available for the selected date range.';
            pricesContainer.appendChild(noDataElement);
        } else {
            data.forEach(price => {
                var priceElement = document.createElement('p');
                priceElement.textContent = `Price: ${price.close}, Date: ${price.date}`; // Corrected to display 'price.close'
                pricesContainer.appendChild(priceElement);
            });
        }
    }

</script>

</body>
</html>


here's my sqlite table info: 
CREATE TABLE 'BTCUSD' ('Date' TEXT,'Open' REAL,'High' REAL,'Low' REAL,'Close' REAL,'Adj_Close' REAL,'Volume' INTEGER);
INSERT INTO 'BTCUSD' ('Date','Open','High','Low','Close','Adj_Close','Volume') VALUES 

1.i would like to fix my app.js to fix database query prompt which im html when i initate the search query it will shows date, pirce(which in database's close ) ,and volume 



----


help me re write the app.js to get the correct database form command 
here's the sqlite info of sqlite.db :
CREATE TABLE 'BTCUSD' ('Date' TEXT,'Open' REAL,'High' REAL,'Low' REAL,'Close' REAL,'Adj_Close' REAL,'Volume' INTEGER);
INSERT INTO 'BTCUSD' ('Date','Open','High','Low','Close','Adj_Close','Volume') VALUES 

here's the app.js code needs to be correct:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.resolve(__dirname, 'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
        createTable();
        insertData();
    }
});

// Function to create btc_prices table
const createTable = () => {
    const createTableSQL = `
        CREATE TABLE IF NOT EXISTS btc_prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date DATE NOT NULL,
            close DECIMAL(10, 2) NOT NULL,
            volume BIGINT NOT NULL
        )
    `;
    db.run(createTableSQL, (err) => {
        if (err) {
            console.error('Error creating table:', err.message);
        } else {
            console.log('Table created successfully');
        }
    });
};

// Function to insert data into btc_prices table
const insertData = () => {
    const insertSQL = `
        INSERT INTO btc_prices (date, close, volume) VALUES
                                                         ('2024-05-25', 68536.88, 28293212160),
                                                         ('2024-05-23', 67929.56, 41895680979),
                                                         ('2024-05-22', 69122.34, 32802561717),
                                                         ('2024-05-21', 70136.53, 46932005990),
                                                         ('2024-05-20', 71448.20, 43850655717)
    `;
    db.run(insertSQL, (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
        } else {
            console.log('Data inserted successfully');
        }
    });
};

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    // Query database for data between startDate and endDate
    const query = `SELECT date, close, volume FROM btc_prices WHERE date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into btc_prices table
app.post('/insert', (req, res) => {
    const { date, close, volume } = req.body;

    // Insert data into btc_prices table
    const insertSQL = `INSERT INTO btc_prices (date, close, volume) VALUES (?, ?, ?)`;
    db.run(insertSQL, [date, close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT date, close, volume FROM btc_prices WHERE date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});





-----


how to let html to get app.js data ?



here's app js code :


const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.resolve(__dirname, 'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
 

 here's html : 
 <!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Price: ${price.price}, Date: ${price.date}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>
<script>
    function displayData(data, startDate, endDate) {
        var pricesContainer = document.getElementById('pricesContainer');
        pricesContainer.innerHTML = '';

        // Display the selected date range
        var dateRangeElement = document.createElement('p');
        dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
        pricesContainer.appendChild(dateRangeElement);

        // Display queried data
        if (data.length === 0) {
            var noDataElement = document.createElement('p');
            noDataElement.textContent = 'No data available for the selected date range.';
            pricesContainer.appendChild(noDataElement);
        } else {
            data.forEach(price => {
                var priceElement = document.createElement('p');
                priceElement.textContent = `Price: ${price.close}, Date: ${price.date}`; // Corrected to display 'price.close'
                pricesContainer.appendChild(priceElement);
            });
        }
    }

</script>

</body>
</html>


i would like the html search event that able to print data too 

like : 
"C:\Program Files\nodejs\node.exe" C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin\www
Server is running on port 3001
  getbtcpricewithseachfunction:server Listening on port 3000 +0ms
Connected to the database
GET / 304 8.457 ms - -
Received request to search data between dates: 2024-05-15 and 2024-05-19
Data retrieved from the database: [                                
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 }
]
GET /search?startDate=2024-05-15&endDate=2024-05-19 200 8.622 ms - 318
Received request to search data between dates: 2024-05-15 and 2024-05-19
Data retrieved from the database: [
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 }
]
GET /search?startDate=2024-05-15&endDate=2024-05-19 304 3.573 ms - -
Received request to search data between dates: 2024-05-15 and 2024-05-19
Data retrieved from the database: [
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 }
]
GET /search?startDate=2024-05-15&endDate=2024-05-19 304 3.387 ms - -
Received request to search data between dates: 2024-05-15 and 2024-05-19
Data retrieved from the database: [
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 }
]
GET /search?startDate=2024-05-15&endDate=2024-05-19 304 3.178 ms - -
Received request to search data between dates: 2024-05-15 and 2024-05-19
Data retrieved from the database: [
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 }
]
GET /search?startDate=2024-05-15&endDate=2024-05-19 304 2.907 ms - -



--------------

on the html page it shows "START DATE: 
2024/05/06
 END DATE: 
2024/05/19
 Search
DATE RANGE: 2024-05-06 TO 2024-05-19

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED

PRICE: UNDEFINED, DATE: UNDEFINED" how to solve this ?

----

i would like the html page show this 

Received request to search data between dates: 2024-05-12 and 2024-05-21
Data retrieved from the database: [                                
  { Date: '2024-05-12', Close: 61448.394531, Volume: 13800459405 },
  { Date: '2024-05-13', Close: 62901.449219, Volume: 27889181179 },
  { Date: '2024-05-14', Close: 61552.789063, Volume: 28186271527 },
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 },
  { Date: '2024-05-20', Close: 71448.195313, Volume: 43850655717 },
  { Date: '2024-05-21', Close: 70136.53125, Volume: 46932005990 },
  { Date: '2024-05-21', Close: 70136.53, Volume: 46932005990 },
  { Date: '2024-05-20', Close: 71448.2, Volume: 43850655717 }




after the search button initiate just show the date: , close, Volume 

here's my html : 

<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Price: ${price.close}, Date: ${price.date}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>


here's my app.js :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.resolve(__dirname, 'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


help me update it 


---------------

here are my code ,the question is when i upload online and initate the search query there's no data come out like in the local 

app.js :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.resolve(__dirname, 'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


html:

<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>



--------


here's app.js code:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));




// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});


const sqlite3 = require('sqlite3').verbose();
const dbPath = 'db/sqlite.db';

let db;
try {
    db = new sqlite3.Database(dbPath, (err) => {
        if (err) {
            console.error('Error connecting to the database:', err.message);
        } else {
            console.log('Connected to the database');
        }
    });
} catch (error) {
    console.error('Unexpected error:', error);
}




// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


here's the path:c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json

help me debug it correct it 

----------

const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
 the code still not show data after search while online but in the local sever it's available how to sovle this ? 




 -----------------

 const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data retrieved from the database:', rows);
            res.json(rows);
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;



help me combine this code with this code :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors'); // Import cors module

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors()); // Enable CORS for all routes

// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
  due to there's an error :
  "C:\Program Files\nodejs\node.exe" C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin\www
node:internal/modules/cjs/loader:1146
  throw err;
  ^

Error: Cannot find module 'cors'
Require stack:
- C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js
- C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin\www
    at Module._resolveFilename (node:internal/modules/cjs/loader:1143:15)
    at Module._load (node:internal/modules/cjs/loader:984:27)
    at Module.require (node:internal/modules/cjs/loader:1231:19)
    at require (node:internal/modules/helpers:179:18)
    at Object.<anonymous> (C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js:6:14)
    at Module._compile (node:internal/modules/cjs/loader:1369:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1427:10)
    at Module.load (node:internal/modules/cjs/loader:1206:32)
    at Module._load (node:internal/modules/cjs/loader:1022:12)
    at Module.require (node:internal/modules/cjs/loader:1231:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\app.js',
    'C:\\Users\\user\\WebstormProjects\\GetBTCPriceWithSeachFunction\\bin\\www'
  ]
}

Node.js v20.12.2

Process finished with exit code 1






-----
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors'); // Import cors module

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors()); // Enable CORS for all routes

// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;

html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>
  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate);
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>



 when upload  html page online it wont see any data printout after search button clicked(query event of database )  but in the local it can show the data ,how to sovle this ? 


 -------------



 app.js:
 const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors'); // Import cors module

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors()); // Enable CORS for all routes

// Create database connection
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Search endpoint for filtering data between dates
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;

    console.log('Received request to search data between dates:', startDate, 'and', endDate);

    // Query database for data between startDate and endDate
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

// Endpoint for inserting data into BTCUSD table
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;

    // Insert data into BTCUSD table
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

const cors = require('cors');
const app = express();
app.use(cors()); // Enable CORS for all routes


module.exports = app;



html :
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>




when upload the project online the page wont see any data printout after the search button clicked(query event of database )  but in the local sever can show the data query result ,how to sovle this ? 







------------------------

help me check Database Path: Ensure that the path to your SQLite database (sqlite.db) is correctly configured for the online environment. Verify that the file exists at the specified location and that the server has permission to access it.

here.s the path :
c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json

app.js :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>


the problem is the project upload online ,it can not show the data from database after clicking the search button on html,but in the local sever ,when you click the search button it will show the data from database , how to sovle this problem  


----------------------

DATE RANGE: 2024-05-15 TO 2024-05-21

DATE: 2024-05-15, CLOSE: 66267.492188, VOLUME: 39815167074

DATE: 2024-05-16, CLOSE: 65231.582031, VOLUME: 31573077994

DATE: 2024-05-17, CLOSE: 67051.875, VOLUME: 28031279310

DATE: 2024-05-18, CLOSE: 66940.804688, VOLUME: 16712277406

DATE: 2024-05-19, CLOSE: 66278.367188, VOLUME: 19249094538

DATE: 2024-05-20, CLOSE: 71448.195313, VOLUME: 43850655717

DATE: 2024-05-21, CLOSE: 70136.53125, VOLUME: 46932005990

DATE: 2024-05-21, CLOSE: 70136.53, VOLUME: 46932005990

DATE: 2024-05-20, CLOSE: 71448.2, VOLUME: 43850655717   the date has repeated on html page after clicking the search buttom on html please debug 

html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

app.js:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


----------------------------



html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = "";

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  <!-- Changed timezone to Asia/Taipei -->
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

app.js:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;





DATE RANGE: 2024-05-15 TO 2024-05-21

DATE: 2024-05-15, CLOSE: 66267.492188, VOLUME: 39815167074

DATE: 2024-05-16, CLOSE: 65231.582031, VOLUME: 31573077994

DATE: 2024-05-17, CLOSE: 67051.875, VOLUME: 28031279310

DATE: 2024-05-18, CLOSE: 66940.804688, VOLUME: 16712277406

DATE: 2024-05-19, CLOSE: 66278.367188, VOLUME: 19249094538

DATE: 2024-05-20, CLOSE: 71448.195313, VOLUME: 43850655717

DATE: 2024-05-21, CLOSE: 70136.53125, VOLUME: 46932005990

DATE: 2024-05-21, CLOSE: 70136.53, VOLUME: 46932005990

DATE: 2024-05-20, CLOSE: 71448.2, VOLUME: 43850655717   

the date data information has repeated on html page after clicking the search buttom on html please debug 





 ------------
 this is express.js
 here are my path:
c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json


app.js code :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;

html code :
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>


i would like to move index.html out of the public package so the github can get the page or github can't read it 






 ------------

 <!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>


const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'GetBTCPriceWithSeachFunction')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


path:
c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json

in the local page when i click the search button it didnt show the data of query how to debug this 

-------------


<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'GetBTCPriceWithSeachFunction')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    console.log("Received search request with startDate:", startDate, "and endDate:", endDate); // Debugging log
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
 

the problem is the html page didn't print out data after cliking the search button 
how to sovle this re-write me a correct update version



---------------


<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'GetBTCPriceWithSeachFunction')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    console.log("Received search request with startDate:", startDate, "and endDate:", endDate); // Debugging log
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
 

the problem is the html page didn't print out data after cliking the search button 
how to sovle this re-write me a correct update version



---------------




const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'GetBTCPriceWithSeachFunction')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;



<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>


here's the path : 
c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json

i would like to see the page on local sever but i didnt see the page on localhost: 3001 or 3000
and re-writre me a update fixed version code to fix this  



---------------

c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json


upload this files to github and make it to page , github wont catch the index.html how to solve this problem ? 




---------------





i've moved the index.html out here's the path :
c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\index.html c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json c:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json


now there are some issue which is im the localhost:3000/30001 it won't show the index.html page
here's the code 

html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

app.js:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;

package.json:
{
  "name": "getbtcpricewithseachfunction",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "deploy": "gh-pages -d public"
  },
  "dependencies": {
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "morgan": "~1.9.1",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "gh-pages": "^6.1.1"
  }
}


Help me debug and update into latest fixed version 


 


---------------



here's the path:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, )));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


app.js:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, )));
app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


what should i set ? this one :
app.use(express.static(path.join(__dirname, )));


---------------


now it can show the page on github but when cliking the search button it can't show data query resilts from database 

here's the code :

html:
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.length === 0) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = "No data available for the selected date range.";
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>

app.js :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


module.exports = app;


package.json:
{
  "name": "getbtcpricewithseachfunction",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node app.js",
    "deploy": "gh-pages -d public"
  },
  "dependencies": {
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "morgan": "~1.9.1",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "gh-pages": "^6.1.1"
  }
}

file path:
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\index.html
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json



re-write or debug to let the online page can show the query results on page after clicking the search button 




---------------


const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
// Serve static files from the root directory
app.use(express.static(path.join(__dirname)));

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});




const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.use(cors());

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


module.exports = app;




combine these two code 





---------------

here's the project path:
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github\workflows
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\.github\workflows\azure-static-web-apps-lemon-mushroom-09d628b1e.yml
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\bin\www
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\db\sqlite.db
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\node_modules
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\images
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\javascripts
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\public\stylesheets\style.css
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\routes
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\app.js
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\index.html
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package.json
C:\Users\user\WebstormProjects\GetBTCPriceWithSeachFunction\package-lock.json


app.js  :
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();

// Middleware setup
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname))); // Serve static files from the root directory
app.use(cors());

// Database setup
const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error connecting to the database:', err.message);
    } else {
        console.log('Connected to the database');
    }
});

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html')); // Serve the HTML file
});

// Search endpoint
app.get('/search', (req, res) => {
    const { startDate, endDate } = req.query;
    const query = `SELECT Date, Close, Volume FROM BTCUSD WHERE Date BETWEEN ? AND ?`;
    db.all(query, [startDate, endDate], (err, rows) => {
        if (err) {
            console.error('Error executing query:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            if (rows.length === 0) {
                console.log('No data found for the specified date range');
                res.status(404).json({ message: 'No data found' });
            } else {
                console.log('Data retrieved from the database:', rows);
                res.json(rows);
            }
        }
    });
});

// Insert data endpoint
app.post('/insert', (req, res) => {
    const { date, open, high, low, close, adj_close, volume } = req.body;
    const insertSQL = `INSERT INTO BTCUSD (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (?, ?, ?, ?, ?, ?, ?)`;
    db.run(insertSQL, [date, open, high, low, close, adj_close, volume], (err) => {
        if (err) {
            console.error('Error inserting data:', err.message);
            res.status(500).json({ error: 'Internal server error' });
        } else {
            console.log('Data inserted successfully');
            res.status(200).json({ message: 'Data inserted successfully' });
        }
    });
});

// Server setup
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;


index.html :
<!DOCTYPE html>
<html>
<head>
  <title>Live Bitcoin Chart</title>

  <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

  <style>
    body {
      padding: 150px;
      background-color: rgba(222, 222, 222, 0.74);
      background-blend-mode: multiply;
      align-items: center;
      text-decoration: none;
      align-content: center;
      justify-content: center;
      text-align: center;
      text-transform: uppercase;
    }
  </style>
</head>
<body>

<h1>Bitcoin</h1>

<div class="tradingview-widget-container">
  <div id="tradingview_12345"></div>
</div>

<br>
<br>

<!-- Date input fields and search button -->
<label for="startDate">Start Date:</label>
<input type="date" id="startDate" name="startDate">
<label for="endDate">End Date:</label>
<input type="date" id="endDate" name="endDate">
<button onclick="searchByDateRange()">Search</button>

<!-- Container to display queried data -->
<div id="pricesContainer"></div>

<!-- JavaScript for handling date range search and displaying data -->
<script>
  function searchByDateRange() {
    var startDate = document.getElementById("startDate").value;
    var endDate = document.getElementById("endDate").value;

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    fetch(`/search?startDate=${startDate}&endDate=${endDate}`)
            .then(response => response.json())
            .then(data => {
              console.log("Response Data:", data);
              displayData(data, startDate, endDate); // Pass startDate and endDate to displayData function
            })
            .catch(error => console.error('Error:', error));
  }

  function displayData(data, startDate, endDate) {
    var pricesContainer = document.getElementById("pricesContainer");
    pricesContainer.innerHTML = ""; // Clear previous content

    // Display the selected date range
    var dateRangeElement = document.createElement("p");
    dateRangeElement.textContent = `Date Range: ${startDate} to ${endDate}`;
    pricesContainer.appendChild(dateRangeElement);

    // Display queried data
    if (data.message) {
      var noDataElement = document.createElement("p");
      noDataElement.textContent = data.message;
      pricesContainer.appendChild(noDataElement);
    } else {
      data.forEach(price => {
        var priceElement = document.createElement("p");
        priceElement.textContent = `Date: ${price.Date}, Close: ${price.Close}, Volume: ${price.Volume}`;
        pricesContainer.appendChild(priceElement);
      });
    }
  }
</script>

<!-- Initialize TradingView chart -->
<script type="text/javascript">
  new TradingView.widget({
    "width": 980,
    "height": 610,
    "symbol": "BTCUSD",
    "interval": "D",
    "timezone": "Asia/Taipei",  // Changed timezone to Asia/Taipei
    "theme": "light",
    "style": "1",
    "locale": "en",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "allow_symbol_change": true,
    "container_id": "tradingview_12345"
  });
</script>

</body>
</html>



package.json:
{
  "name": "getbtcpricewithseachfunction",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node app.js",
    "deploy": "gh-pages -d public"
  },
  "dependencies": {
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "morgan": "~1.9.1",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "gh-pages": "^6.1.1"
  }
}


this project is express
i would like to let my page even if upldoad to github it can still get data query results on page by clicking seach button 
like the result :
Data retrieved from the database: [
  { Date: '2024-05-13', Close: 62901.449219, Volume: 27889181179 },
  { Date: '2024-05-14', Close: 61552.789063, Volume: 28186271527 },
  { Date: '2024-05-15', Close: 66267.492188, Volume: 39815167074 },
  { Date: '2024-05-16', Close: 65231.582031, Volume: 31573077994 },
  { Date: '2024-05-17', Close: 67051.875, Volume: 28031279310 },
  { Date: '2024-05-18', Close: 66940.804688, Volume: 16712277406 },
  { Date: '2024-05-19', Close: 66278.367188, Volume: 19249094538 },



help me rewrite /update correct version enable let the page works as fine as local




---------------
